{"ast":null,"code":"import { CALL_API, Schemas } from '../middleware/api';\nexport const USER_REQUEST = 'USER_REQUEST';\nexport const USER_SUCCESS = 'USER_SUCCESS';\nexport const USER_FAILURE = 'USER_FAILURE'; // Fetches a single user from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\n\nconst fetchUser = login => ({\n  [CALL_API]: {\n    types: [USER_REQUEST, USER_SUCCESS, USER_FAILURE],\n    endpoint: \"users/\".concat(login),\n    schema: Schemas.USER\n  }\n});\n\nexport const loadUser = (login, requiredFields = []) => (dispatch, getState) => {\n  const user = getState().entities.users[login];\n\n  if (user && requiredFields.every(key => user.hasOwnProperty(key))) {\n    return null;\n  }\n\n  return dispatch(fetchUser(login));\n};\nexport const REPO_REQUEST = 'REPO_REQUEST';\nexport const REPO_SUCCESS = 'REPO_SUCCESS';\nexport const REPO_FAILURE = 'REPO_FAILURE'; // Fetches a forks from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\n\nconst fetchForks = (fullName, nextPageURL) => ({\n  fullName,\n  [CALL_API]: {\n    types: [FORKS_REQUEST, FORKS_SUCCESS, FORKS_FAILURE],\n    endpoint: nextPageURL,\n    schema: Schemas.FORKS_ARRAY\n  }\n});\n\nexport const loadForks = (fullName, nextPage) => (dispatch, getState) => {\n  let counter = 0;\n\n  let _ref = getState().pagination.ForksReducer[fullName] || {},\n      _ref$nextPageUrl = _ref.nextPageUrl,\n      nextPageUrl = _ref$nextPageUrl === void 0 ? \"repos/\".concat(fullName, \"/forks\") : _ref$nextPageUrl,\n      _ref$pageCount = _ref.pageCount,\n      pageCount = _ref$pageCount === void 0 ? 0 : _ref$pageCount;\n\n  if (getState().pagination.ForksReducer[fullName]) {\n    if (counter < getState().pagination.ForksReducer[fullName].pageCount) {\n      counter = getState().pagination.ForksReducer[fullName].pageCount;\n    }\n  }\n\n  if (pageCount > 0 && !nextPage) {\n    console.log('returning null');\n    return null;\n  }\n\n  let url = new URL(window.location.href);\n  let search_params = url.searchParams;\n\n  if (!nextPage && search_params.get('page') > 1) {\n    const neededpage = Number(search_params.get('page'));\n\n    function waitForNextPage() {\n      if (getState().pagination.ForksReducer[fullName]) {\n        console.log(\"im here, \".concat(getState().pagination.ForksReducer[fullName].nextPageUrl));\n        let jumptopage = getState().pagination.ForksReducer[fullName].nextPageUrl;\n        console.log(jumptopage.toString().slice(0, -1).concat(neededpage));\n        nextPageUrl = jumptopage.toString().slice(0, -1).concat(neededpage);\n        counter = neededpage;\n        console.log(counter);\n        return dispatch(fetchForks(fullName, nextPageUrl));\n      } else {\n        console.log(\"waiting for nextpage..\");\n        setTimeout(waitForNextPage, 250);\n      }\n    }\n\n    waitForNextPage();\n  }\n\n  if (!window.location.href.includes('page')) {\n    search_params.set('page', '1');\n    url.search = search_params.toString();\n    let new_url = url.toString();\n    window.location.href = new_url;\n  }\n\n  if (counter > 0) {\n    const stateObj = {\n      page: '0'\n    };\n    window.history.replaceState(stateObj, 'page', \"?page=\".concat(counter + 1));\n  }\n\n  return dispatch(fetchForks(fullName, nextPageUrl));\n};\nexport const FORKS_REQUEST = 'FORKS_REQUEST';\nexport const FORKS_SUCCESS = 'FORKS_SUCCESS';\nexport const FORKS_FAILURE = 'FORKS_FAILURE'; // Fetches a single repository from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\n\nconst fetchRepo = fullName => ({\n  [CALL_API]: {\n    types: [REPO_REQUEST, REPO_SUCCESS, REPO_FAILURE],\n    endpoint: \"repos/\".concat(fullName),\n    schema: Schemas.REPO\n  }\n}); // Fetches a single repository from Github API unless it is cached.\n// Relies on Redux Thunk middleware.\n\n\nexport const loadRepo = (fullName, requiredFields = []) => (dispatch, getState) => {\n  const repo = getState().entities.repos[fullName];\n\n  if (repo && requiredFields.every(key => repo.hasOwnProperty(key))) {\n    return null;\n  }\n\n  return dispatch(fetchRepo(fullName));\n};\nexport const RESET_ERROR_MESSAGE = 'RESET_ERROR_MESSAGE'; // Resets the currently visible error message.\n\nexport const resetErrorMessage = () => ({\n  type: RESET_ERROR_MESSAGE\n});","map":{"version":3,"sources":["/Users/mikepatrenin/Downloads/ForksFinder/src/actions/index.js"],"names":["CALL_API","Schemas","USER_REQUEST","USER_SUCCESS","USER_FAILURE","fetchUser","login","types","endpoint","schema","USER","loadUser","requiredFields","dispatch","getState","user","entities","users","every","key","hasOwnProperty","REPO_REQUEST","REPO_SUCCESS","REPO_FAILURE","fetchForks","fullName","nextPageURL","FORKS_REQUEST","FORKS_SUCCESS","FORKS_FAILURE","FORKS_ARRAY","loadForks","nextPage","counter","pagination","ForksReducer","nextPageUrl","pageCount","console","log","url","URL","window","location","href","search_params","searchParams","get","neededpage","Number","waitForNextPage","jumptopage","toString","slice","concat","setTimeout","includes","set","search","new_url","stateObj","page","history","replaceState","fetchRepo","REPO","loadRepo","repo","repos","RESET_ERROR_MESSAGE","resetErrorMessage","type"],"mappings":"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","sourcesContent":["import { CALL_API, Schemas } from '../middleware/api'\n\nexport const USER_REQUEST = 'USER_REQUEST'\nexport const USER_SUCCESS = 'USER_SUCCESS'\nexport const USER_FAILURE = 'USER_FAILURE'\n\n// Fetches a single user from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\n\nconst fetchUser = login => ({\n  [CALL_API]: {\n    types: [ USER_REQUEST, USER_SUCCESS, USER_FAILURE ],\n    endpoint: `users/${login}`,\n    schema: Schemas.USER\n  }\n})\n\nexport const loadUser = (login, requiredFields = []) => (dispatch, getState) => {\n  const user = getState().entities.users[login]\n  if (user && requiredFields.every(key => user.hasOwnProperty(key))) {\n    return null\n  }\n\n  return dispatch(fetchUser(login))\n}\n\nexport const REPO_REQUEST = 'REPO_REQUEST'\nexport const REPO_SUCCESS = 'REPO_SUCCESS'\nexport const REPO_FAILURE = 'REPO_FAILURE'\n\n// Fetches a forks from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\n\nconst fetchForks = (fullName, nextPageURL) => ({\n  fullName,\n  [CALL_API]: {\n    types: [ FORKS_REQUEST, FORKS_SUCCESS, FORKS_FAILURE ],\n    endpoint: nextPageURL,\n    schema: Schemas.FORKS_ARRAY\n  }\n})\n\nexport const loadForks = (fullName, nextPage) => (dispatch, getState) => {\n  let counter = 0\n  let {\n    nextPageUrl = `repos/${fullName}/forks`,\n    pageCount = 0\n  } = getState().pagination.ForksReducer[fullName] || {}\n\n  if (getState().pagination.ForksReducer[fullName]){\n    if (counter < getState().pagination.ForksReducer[fullName].pageCount) \n    {counter = getState().pagination.ForksReducer[fullName].pageCount}\n  }\n\n  if (pageCount > 0 && !nextPage) {\n    console.log('returning null')\n    return null\n  }\n\n  let url = new URL(window.location.href)\n  let search_params = url.searchParams\n\n  if (!nextPage && search_params.get('page') > 1){\n    const neededpage = Number(search_params.get('page'))\n    function waitForNextPage(){\n      if (getState().pagination.ForksReducer[fullName]) {\n        console.log(`im here, ${getState().pagination.ForksReducer[fullName].nextPageUrl}`)\n        let jumptopage = getState().pagination.ForksReducer[fullName].nextPageUrl\n        console.log(jumptopage.toString().slice(0,-1).concat(neededpage))\n        nextPageUrl = jumptopage.toString().slice(0,-1).concat(neededpage)\n        counter = neededpage\n        console.log(counter)\n        return dispatch(fetchForks(fullName, nextPageUrl))\n      }\n      else {\n        console.log(`waiting for nextpage..`)\n        setTimeout(waitForNextPage, 250)\n      }\n    }\n    waitForNextPage();\n  }\n\n  if (!window.location.href.includes('page')){\n    search_params.set('page', '1')\n    url.search = search_params.toString()\n    let new_url = url.toString()\n    window.location.href = new_url\n   } \n  \n   if (counter > 0) {\n    const stateObj = { page: '0' }\n    window.history.replaceState(stateObj, 'page', `?page=${counter+1}`)\n   }\n\n  return dispatch(fetchForks(fullName, nextPageUrl))\n  }\n\n  export const FORKS_REQUEST = 'FORKS_REQUEST'\n  export const FORKS_SUCCESS = 'FORKS_SUCCESS'\n  export const FORKS_FAILURE = 'FORKS_FAILURE'\n\n// Fetches a single repository from Github API.\n// Relies on the custom API middleware defined in ../middleware/api.js.\nconst fetchRepo = fullName => ({\n  [CALL_API]: {\n    types: [ REPO_REQUEST, REPO_SUCCESS, REPO_FAILURE ],\n    endpoint: `repos/${fullName}`,\n    schema: Schemas.REPO\n  }\n})\n\n// Fetches a single repository from Github API unless it is cached.\n// Relies on Redux Thunk middleware.\nexport const loadRepo = (fullName, requiredFields = []) => (dispatch, getState) => {\n  const repo = getState().entities.repos[fullName]\n  if (repo && requiredFields.every(key => repo.hasOwnProperty(key))) {\n    return null\n  }\n\n  return dispatch(fetchRepo(fullName))\n}\n\n\nexport const RESET_ERROR_MESSAGE = 'RESET_ERROR_MESSAGE'\n\n// Resets the currently visible error message.\nexport const resetErrorMessage = () => ({\n    type: RESET_ERROR_MESSAGE\n})\n"]},"metadata":{},"sourceType":"module"}