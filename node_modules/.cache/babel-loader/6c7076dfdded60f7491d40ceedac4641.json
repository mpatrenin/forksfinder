{"ast":null,"code":"import * as ActionTypes from '../actions';\nimport merge from 'lodash/merge';\nimport paginate from './paginate';\nimport { combineReducers } from 'redux'; // Updates an entity cache in response to any action with response.entities.\n\nconst entities = (state = {\n  users: {},\n  repos: {},\n  forks: {}\n}, action) => {\n  if (action.response && action.response.entities) {\n    return merge({}, state, action.response.entities);\n  }\n\n  return state;\n}; // Updates error message to notify about the failed fetches.\n\n\nconst errorMessage = (state = null, action) => {\n  const type = action.type,\n        error = action.error;\n\n  if (type === ActionTypes.RESET_ERROR_MESSAGE) {\n    return null;\n  } else if (error) {\n    return error;\n  }\n\n  return state;\n}; // Updates the pagination data for different actions.\n\n\nconst pagination = combineReducers({\n  ForksReducer: paginate({\n    mapActionToKey: action => action.fullName,\n    types: [ActionTypes.FORKS_REQUEST, ActionTypes.FORKS_SUCCESS, ActionTypes.FORKS_FAILURE]\n  })\n});\nconst rootReducer = combineReducers({\n  entities,\n  pagination,\n  errorMessage\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/mikepatrenin/Downloads/ForksFinder/src/reducers/index.js"],"names":["ActionTypes","merge","paginate","combineReducers","entities","state","users","repos","forks","action","response","errorMessage","type","error","RESET_ERROR_MESSAGE","pagination","ForksReducer","mapActionToKey","fullName","types","FORKS_REQUEST","FORKS_SUCCESS","FORKS_FAILURE","rootReducer"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,KAAK,EAAE,EAApB;AAAwBC,EAAAA,KAAK,EAAE;AAA/B,CAAT,EAA8CC,MAA9C,KAAyD;AACxE,MAAIA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBN,QAAvC,EAAiD;AAC/C,WAAOH,KAAK,CAAC,EAAD,EAAKI,KAAL,EAAYI,MAAM,CAACC,QAAP,CAAgBN,QAA5B,CAAZ;AACD;;AAED,SAAOC,KAAP;AACD,CAND,C,CAQA;;;AACA,MAAMM,YAAY,GAAG,CAACN,KAAK,GAAG,IAAT,EAAeI,MAAf,KAA0B;AAAA,QACrCG,IADqC,GACrBH,MADqB,CACrCG,IADqC;AAAA,QAC/BC,KAD+B,GACrBJ,MADqB,CAC/BI,KAD+B;;AAG7C,MAAID,IAAI,KAAKZ,WAAW,CAACc,mBAAzB,EAA8C;AAC5C,WAAO,IAAP;AACD,GAFD,MAEO,IAAID,KAAJ,EAAW;AAChB,WAAOA,KAAP;AACD;;AAED,SAAOR,KAAP;AACD,CAVD,C,CAYA;;;AACA,MAAMU,UAAU,GAAGZ,eAAe,CAAC;AACjCa,EAAAA,YAAY,EAAEd,QAAQ,CAAC;AACrBe,IAAAA,cAAc,EAAER,MAAM,IAAIA,MAAM,CAACS,QADZ;AAErBC,IAAAA,KAAK,EAAE,CACLnB,WAAW,CAACoB,aADP,EAELpB,WAAW,CAACqB,aAFP,EAGLrB,WAAW,CAACsB,aAHP;AAFc,GAAD;AADW,CAAD,CAAlC;AAWA,MAAMC,WAAW,GAAGpB,eAAe,CAAC;AAClCC,EAAAA,QADkC;AAElCW,EAAAA,UAFkC;AAGlCJ,EAAAA;AAHkC,CAAD,CAAnC;AAMA,eAAeY,WAAf","sourcesContent":["import * as ActionTypes from '../actions'\nimport merge from 'lodash/merge'\nimport paginate from './paginate'\nimport { combineReducers } from 'redux'\n\n// Updates an entity cache in response to any action with response.entities.\nconst entities = (state = { users: {}, repos: {}, forks: {} }, action) => {\n  if (action.response && action.response.entities) {\n    return merge({}, state, action.response.entities)\n  }\n\n  return state\n}\n\n// Updates error message to notify about the failed fetches.\nconst errorMessage = (state = null, action) => {\n  const { type, error } = action\n\n  if (type === ActionTypes.RESET_ERROR_MESSAGE) {\n    return null\n  } else if (error) {\n    return error\n  }\n\n  return state\n}\n\n// Updates the pagination data for different actions.\nconst pagination = combineReducers({\n  ForksReducer: paginate({\n    mapActionToKey: action => action.fullName,\n    types: [\n      ActionTypes.FORKS_REQUEST,\n      ActionTypes.FORKS_SUCCESS,\n      ActionTypes.FORKS_FAILURE\n    ]\n  })\n})\n\nconst rootReducer = combineReducers({\n  entities,\n  pagination,\n  errorMessage,\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}