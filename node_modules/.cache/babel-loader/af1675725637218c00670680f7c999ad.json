{"ast":null,"code":"'use strict';\n\nvar keycodes = require('./keycodes');\n\nfunction assertKeyString(s) {\n  if (!/^(ctrl-|shift-|alt-|meta-){0,4}\\w+$/.test(s)) throw new Error('The string to parse needs to be of the format \"c\", \"ctrl-c\", \"shift-ctrl-c\".');\n}\n\nmodule.exports = function parse(s) {\n  var keyString = s.trim().toLowerCase();\n  assertKeyString(keyString);\n  var key = {\n    name: undefined,\n    ctrl: false,\n    meta: false,\n    shift: false,\n    alt: false,\n    sequence: undefined\n  },\n      parts = keyString.split('-'),\n      c;\n  key.name = parts.pop();\n\n  while (c = parts.pop()) key[c] = true;\n\n  key.sequence = key.ctrl ? keycodes.ctrl[key.name] || key.name : keycodes.nomod[key.name] || key.name; // uppercase sequence for single chars when shift was pressed\n\n  if (key.shift && key.sequence && key.sequence.length === 1) key.sequence = key.sequence.toUpperCase();\n  return key;\n};","map":{"version":3,"sources":["/Users/mikepatrenin/Downloads/ForksFinder/node_modules/parse-key/parse-key.js"],"names":["keycodes","require","assertKeyString","s","test","Error","module","exports","parse","keyString","trim","toLowerCase","key","name","undefined","ctrl","meta","shift","alt","sequence","parts","split","c","pop","nomod","length","toUpperCase"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,MAAI,CAAC,sCAAsCC,IAAtC,CAA2CD,CAA3C,CAAL,EACE,MAAM,IAAIE,KAAJ,CAAU,8EAAV,CAAN;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeL,CAAf,EAAkB;AACjC,MAAIM,SAAS,GAAGN,CAAC,CAACO,IAAF,GAASC,WAAT,EAAhB;AAEAT,EAAAA,eAAe,CAACO,SAAD,CAAf;AAEA,MAAIG,GAAG,GAAG;AACNC,IAAAA,IAAI,EAAQC,SADN;AAENC,IAAAA,IAAI,EAAQ,KAFN;AAGNC,IAAAA,IAAI,EAAQ,KAHN;AAINC,IAAAA,KAAK,EAAO,KAJN;AAKNC,IAAAA,GAAG,EAAS,KALN;AAMNC,IAAAA,QAAQ,EAAIL;AANN,GAAV;AAAA,MAQEM,KAAK,GAAGX,SAAS,CAACY,KAAV,CAAgB,GAAhB,CARV;AAAA,MASEC,CATF;AAWAV,EAAAA,GAAG,CAACC,IAAJ,GAAWO,KAAK,CAACG,GAAN,EAAX;;AACA,SAAOD,CAAC,GAAGF,KAAK,CAACG,GAAN,EAAX,EAAyBX,GAAG,CAACU,CAAD,CAAH,GAAS,IAAT;;AACzBV,EAAAA,GAAG,CAACO,QAAJ,GAAeP,GAAG,CAACG,IAAJ,GACXf,QAAQ,CAACe,IAAT,CAAcH,GAAG,CAACC,IAAlB,KAA2BD,GAAG,CAACC,IADpB,GAEXb,QAAQ,CAACwB,KAAT,CAAeZ,GAAG,CAACC,IAAnB,KAA4BD,GAAG,CAACC,IAFpC,CAlBiC,CAsBjC;;AACA,MAAID,GAAG,CAACK,KAAJ,IAAaL,GAAG,CAACO,QAAjB,IAA6BP,GAAG,CAACO,QAAJ,CAAaM,MAAb,KAAwB,CAAzD,EACEb,GAAG,CAACO,QAAJ,GAAeP,GAAG,CAACO,QAAJ,CAAaO,WAAb,EAAf;AAEF,SAAOd,GAAP;AACD,CA3BD","sourcesContent":["'use strict';\n\nvar keycodes = require('./keycodes');\n\nfunction assertKeyString(s) {\n  if (!/^(ctrl-|shift-|alt-|meta-){0,4}\\w+$/.test(s))\n    throw new Error('The string to parse needs to be of the format \"c\", \"ctrl-c\", \"shift-ctrl-c\".');\n}\n\nmodule.exports = function parse(s) {\n  var keyString = s.trim().toLowerCase();\n\n  assertKeyString(keyString);\n\n  var key = {\n      name     :  undefined\n    , ctrl     :  false\n    , meta     :  false\n    , shift    :  false\n    , alt      :  false\n    , sequence :  undefined\n  }\n  , parts = keyString.split('-')\n  , c;\n\n  key.name = parts.pop();\n  while((c = parts.pop())) key[c] = true;\n  key.sequence = key.ctrl \n    ? keycodes.ctrl[key.name] || key.name\n    : keycodes.nomod[key.name] || key.name;\n\n  // uppercase sequence for single chars when shift was pressed\n  if (key.shift && key.sequence && key.sequence.length === 1)\n    key.sequence = key.sequence.toUpperCase();\n\n  return key;\n};\n"]},"metadata":{},"sourceType":"script"}