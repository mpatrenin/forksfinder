{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport api from '../middleware/api';\nimport rootReducer from '../reducers';\nimport DevTools from '../containers/DevTools';\n\nvar configureStore = function configureStore(preloadedState) {\n  var store = createStore(rootReducer, preloadedState, compose(applyMiddleware(thunk, api, createLogger()), DevTools.instrument()));\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', function () {\n      store.replaceReducer(rootReducer);\n    });\n  }\n\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/Users/mikepatrenin/Downloads/ForksFinder/src/store/configureStore.dev.js"],"names":["createStore","applyMiddleware","compose","thunk","createLogger","api","rootReducer","DevTools","configureStore","preloadedState","store","instrument","module","hot","accept","replaceReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,cAAc,EAAI;AACvC,MAAMC,KAAK,GAAGV,WAAW,CACvBM,WADuB,EAEvBG,cAFuB,EAGvBP,OAAO,CACLD,eAAe,CAACE,KAAD,EAAQE,GAAR,EAAaD,YAAY,EAAzB,CADV,EAELG,QAAQ,CAACI,UAAT,EAFK,CAHgB,CAAzB;;AASA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,YAAM;AACrCJ,MAAAA,KAAK,CAACK,cAAN,CAAqBT,WAArB;AACD,KAFD;AAGD;;AAED,SAAOI,KAAP;AACD,CAlBD;;AAoBA,eAAeF,cAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport api from '../middleware/api'\nimport rootReducer from '../reducers'\nimport DevTools from '../containers/DevTools'\n\nconst configureStore = preloadedState => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(\n      applyMiddleware(thunk, api, createLogger()),\n      DevTools.instrument()\n    )\n  )\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      store.replaceReducer(rootReducer)\n    })\n  }\n\n  return store\n}\n\nexport default configureStore\n"]},"metadata":{},"sourceType":"module"}