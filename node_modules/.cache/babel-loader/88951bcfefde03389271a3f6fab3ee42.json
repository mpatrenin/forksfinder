{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = persistState;\n\nvar _mapValues = _interopRequireDefault(require(\"lodash/mapValues\"));\n\nvar _identity = _interopRequireDefault(require(\"lodash/identity\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction persistState(sessionId) {\n  var deserializeState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _identity[\"default\"];\n  var deserializeAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _identity[\"default\"];\n\n  if (!sessionId) {\n    return function (next) {\n      return function () {\n        return next.apply(void 0, arguments);\n      };\n    };\n  }\n\n  function deserialize(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      actionsById: (0, _mapValues[\"default\"])(state.actionsById, function (liftedAction) {\n        return _objectSpread(_objectSpread({}, liftedAction), {}, {\n          action: deserializeAction(liftedAction.action)\n        });\n      }),\n      committedState: deserializeState(state.committedState),\n      computedStates: state.computedStates.map(function (computedState) {\n        return _objectSpread(_objectSpread({}, computedState), {}, {\n          state: deserializeState(computedState.state)\n        });\n      })\n    });\n  }\n\n  return function (next) {\n    return function (reducer, initialState) {\n      var key = \"redux-dev-session-\".concat(sessionId);\n      var finalInitialState;\n\n      try {\n        var json = localStorage.getItem(key);\n\n        if (json) {\n          finalInitialState = deserialize(JSON.parse(json)) || initialState;\n          next(reducer, initialState);\n        }\n      } catch (e) {\n        console.warn('Could not read debug session from localStorage:', e); // eslint-disable-line no-console\n\n        try {\n          localStorage.removeItem(key);\n        } finally {\n          finalInitialState = undefined;\n        }\n      }\n\n      var store = next(reducer, finalInitialState);\n      return _objectSpread(_objectSpread({}, store), {}, {\n        dispatch: function dispatch(action) {\n          store.dispatch(action);\n\n          try {\n            localStorage.setItem(key, JSON.stringify(store.getState()));\n          } catch (e) {\n            console.warn('Could not write debug session to localStorage:', e); // eslint-disable-line no-console\n          }\n\n          return action;\n        }\n      });\n    };\n  };\n}","map":{"version":3,"sources":["../src/persistState.ts"],"names":["deserializeState","identity","deserializeAction","next","actionsById","state","action","liftedAction","committedState","computedStates","computedState","key","json","localStorage","finalInitialState","deserialize","JSON","console","store","dispatch"],"mappings":"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","sourcesContent":["import mapValues from 'lodash/mapValues';\nimport identity from 'lodash/identity';\nimport { Action, PreloadedState, Reducer, StoreEnhancer } from 'redux';\nimport { LiftedState } from 'redux-devtools-instrument';\n\nexport default function persistState<\n  S,\n  A extends Action<unknown>,\n  MonitorState\n>(\n  sessionId?: string | null,\n  deserializeState: (state: S) => S = identity,\n  deserializeAction: (action: A) => A = identity\n): StoreEnhancer {\n  if (!sessionId) {\n    return (next) => (...args) => next(...args);\n  }\n\n  function deserialize(\n    state: LiftedState<S, A, MonitorState>\n  ): LiftedState<S, A, MonitorState> {\n    return {\n      ...state,\n      actionsById: mapValues(state.actionsById, (liftedAction) => ({\n        ...liftedAction,\n        action: deserializeAction(liftedAction.action),\n      })),\n      committedState: deserializeState(state.committedState),\n      computedStates: state.computedStates.map((computedState) => ({\n        ...computedState,\n        state: deserializeState(computedState.state),\n      })),\n    };\n  }\n\n  return (next) => <S, A extends Action<unknown>>(\n    reducer: Reducer<S, A>,\n    initialState?: PreloadedState<S>\n  ) => {\n    const key = `redux-dev-session-${sessionId}`;\n\n    let finalInitialState;\n    try {\n      const json = localStorage.getItem(key);\n      if (json) {\n        finalInitialState = deserialize(JSON.parse(json)) || initialState;\n        next(reducer, initialState);\n      }\n    } catch (e) {\n      console.warn('Could not read debug session from localStorage:', e); // eslint-disable-line no-console\n      try {\n        localStorage.removeItem(key);\n      } finally {\n        finalInitialState = undefined;\n      }\n    }\n\n    const store = next(\n      reducer,\n      finalInitialState as PreloadedState<S> | undefined\n    );\n\n    return {\n      ...store,\n      dispatch<T extends A>(action: T) {\n        store.dispatch(action);\n\n        try {\n          localStorage.setItem(key, JSON.stringify(store.getState()));\n        } catch (e) {\n          console.warn('Could not write debug session to localStorage:', e); // eslint-disable-line no-console\n        }\n\n        return action;\n      },\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"script"}